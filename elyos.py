# -*- coding: utf-8 -*-
"""elyos.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/16Kk2JcQw9uTwa_p4SsAF-2_s6z5z3CAX
"""

# Commented out IPython magic to ensure Python compatibility.
# %pip -q install google-genai

# Configura a API Key do Google Gemini

import os
from google.colab import userdata

os.environ["GOOGLE_API_KEY"] = userdata.get('GOOGLE_API_KEY')

# Configura o cliente da SDK do Gemini

from google import genai

client = genai.Client()

MODEL_ID = "gemini-2.0-flash"

# Instalar Framework de agentes do Google ################################################
!pip install -q google-adk

from google.adk.agents import Agent
from google.adk.runners import Runner
from google.adk.sessions import InMemorySessionService
from google.adk.tools import google_search
from google.genai import types  # Para criar conteúdos (Content e Part)
from datetime import date
import textwrap # Para formatar melhor a saída de texto
from IPython.display import display, Markdown # Para exibir texto formatado no Colab
import requests # Para fazer requisições HTTP
import warnings

warnings.filterwarnings("ignore")

# Função auxiliar que envia uma mensagem para um agente via Runner e retorna a resposta final
def call_agent(agent: Agent, message_text: str) -> str:
    # Cria um serviço de sessão em memória
    session_service = InMemorySessionService()
    # Cria uma nova sessão (você pode personalizar os IDs conforme necessário)
    session = session_service.create_session(app_name=agent.name, user_id="user1", session_id="session1")
    # Cria um Runner para o agente
    runner = Runner(agent=agent, app_name=agent.name, session_service=session_service)
    # Cria o conteúdo da mensagem de entrada
    content = types.Content(role="user", parts=[types.Part(text=message_text)])

    final_response = ""
    # Itera assincronamente pelos eventos retornados durante a execução do agente
    for event in runner.run(user_id="user1", session_id="session1", new_message=content):
        if event.is_final_response():
          for part in event.content.parts:
            if part.text is not None:
              final_response += part.text
              final_response += "\n"
    return final_response

# Função auxiliar para exibir texto formatado em Markdown no Colab
def to_markdown(text):
  text = text.replace('•', '  *')
  return Markdown(textwrap.indent(text, '> ', predicate=lambda _: True))

#######################################################
# --- Agente 1: Router e Buscador de Conteúdo CNV --- #
#######################################################
# Modificada para retornar a instância do agente
def agente_primario_router_conteudo(mensagem_usuario): # Esta função ainda recebe a mensagem inicial

    # Lista de URLs com conteúdo sobre CNV
    cnv_urls = [
      "https://www.institutocnvb.com.br/single-post/comunica%C3%A7%C3%A3o-n%C3%A3o-violenta-cnv-o-que-%C3%A9-e-como-praticar",
      "https://www.ivanpetry.com/post/comunicacao-nao-violenta-guia-completo",
      "https://www.rdstation.com/blog/agencias/comunicacao-nao-violenta/",
      "https://napratica.org.br/comunicacao-nao-violenta/",
      "https://colabcolibri.com/cnv/",
      "https://www.mppi.mp.br/internet/wp-content/uploads/2020/09/Ebook-Comunicac%CC%A7a%CC%83o-Na%CC%83o-Violenta_MPPI-1-1-1.pdf",
      "https://ceaf.mpba.mp.br/wp-content/uploads/2022/10/Comunicacao-Nao-Violenta.pdf"
    ]
    # Converter a lista de URLs em uma string formatada para a instrução
    cnv_urls_str = "\n".join(cnv_urls)


    agente_1_instance = Agent( # Renomeada para clareza, cria a instância do Agente
        name="agente_primario_router_conteudo",
        model="gemini-2.0-flash",
        instruction=f"""
        Você é o agente primário do chatbot ElyOS, focado em Comunicação Não Violenta (CNV).
        Sua principal função é entender a intenção da mensagem do usuário e rotear a requisição ou buscar conteúdo.

        Analise cuidadosamente a `Mensagem do usuário`. Considere o contexto de uma conversa sobre CNV já iniciada.

        1.  **Identificação de Comando de Status:**
            * Se a mensagem contiver explicitamente o nome do companheiro virtual OU as palavras "status", "companheiro", "animal", "pet", "estrelas", "pontuação" ou similares que *claramente* indiquem que o usuário quer ver o status do companheiro, GERE A RESPOSTA CURTA E ESPECÍFICA: `##STATUS_REQUEST##`.
            * Considere apenas comandos *claros* de status. Não confunda outras perguntas ou respostas curtas com comandos de status.

        2.  **Identificação de Início da Tutoria (Primeira Resposta Afirmativa):**
            * Se a mensagem for curta (1 ou 2 palavras) E indicar uma resposta afirmativa para *começar* a aprender CNV (como "sim", "pronto", "vamos lá", "ok", "s", "bora", "começar", "vamos"), interprete isso como o sinal para a introdução inicial.
            * Nesse caso, USE A FERRAMENTA `Google Search` nos links fornecidos para buscar uma introdução ampla aos conceitos básicos da CNV, os 4 pilares, ou o que é CNV. Prepare uma resposta que apresente a CNV e **sugira os próximos tópicos para explorar (por exemplo, os 4 pilares ou a origem)**.

        3.  **Identificação de Pergunta Genérica de Seguimento:**
            * Se a mensagem **NÃO** for um comando claro de status (ponto 1) **E** a mensagem for genérica, curta e indicar que o usuário quer continuar após uma introdução (como "e agora?", "próximo?", "continuar?"), interprete isso como um pedido para sugerir os próximos passos no aprendizado de CNV.
            * Nesse caso, **NÃO BUSQUE UMA NOVA INTRODUÇÃO**. Em vez disso, gere uma resposta que **reforce os principais tópicos a serem explorados** (pilares, origem, dicas, exercícios) e **convide o usuário a escolher um deles** para focar.

        4.  **Identificação de Pergunta ou Tópico Específico de CNV:**
            * Se a mensagem **NÃO** for um comando claro de status (ponto 1) **E** **NÃO** for uma resposta afirmativa inicial (ponto 2) **E** **NÃO** for uma pergunta genérica de seguimento (ponto 3), assuma que o usuário tem uma pergunta ou quer explorar um tópico específico de CNV.
            * USE A FERRAMENTA `Google Search` para buscar informações relevantes sobre o **tópico específico** da mensagem do usuário nos seguintes links de alta qualidade:
                {cnv_urls_str}
            * Considere o texto completo da mensagem do usuário para direcionar sua busca dentro desses links.
            * Seja capaz de sintetizar as informações encontradas para responder diretamente à pergunta do usuário ou para preparar o conteúdo detalhado para o próximo agente. Se a busca não retornar informações suficientes nos links fornecidos para a requisição específica do usuário, mencione que buscou nos materiais disponíveis.

        5.  **Saída:** Retorne o conteúdo de CNV relevante encontrado ou sintetizado (introdução inicial, sugestão de próximos tópicos, resposta a uma pergunta específica), ou a marcação `##STATUS_REQUEST##` se for um pedido de status. Este conteúdo será processado pelos próximos agentes (exceto `##STATUS_REQUEST##`).
        """,
        description="Agente que identifica a intenção do usuário (status, iniciar, seguir, tópico) e busca/direciona conteúdo de CNV.",
        tools=[google_search] # Usando a variável Google Search importada
    )

    # Note que aqui NÃO chamamos call_agent. A entrada (mensagem_usuario) será usada na chamada ao call_agent no loop principal.

    return agente_1_instance # <-- RETORNA A INSTÂNCIA DO AGENTE

####################################################
# --- Agente 2: Extrator de Conteúdo CNV --- #
####################################################
# Modificada para retornar a instância do agente
def agente_extrator_cnv(): # REMOVIDA a entrada de mensagem aqui
    agente_2_instance = Agent( # <<< Verifique os espaços aqui
        name="agente_extrator_cnv",
        model="gemini-2.0-flash",
        instruction="""
        Você é o agente extrator de conteúdo do chatbot ElyOS.
        Você recebe conteúdo bruto ou semi-processado sobre Comunicação Não Violenta (CNV)
        do agente anterior. Sua tarefa é analisar este conteúdo e extrair/refinar elementos específicos...
        Formate a saída de forma clara, destacando os elementos extraídos.
        Se o conteúdo recebido for a marcação de status (`##STATUS_REQUEST##`), simplesmente repasse esta marcação.
        """,
        description="Agente que extrai e refina elementos práticos de CNV do conteúdo.",
        tools=[] # Este agente não precisa de ferramentas externas
    )

    # Note que aqui NÃO chamamos call_agent. A entrada (conteúdo) será passada no loop principal.
    return agente_2_instance # RETORNA A INSTÂNCIA DO AGENTE

##############################################
# --- Agente 3: Redator ElyOS (Persona) --- #
##############################################
# Modificada para retornar a instância do agente
def agente_redator_elyos(): # REMOVIDA a entrada de mensagem aqui
    agente_3_instance = Agent( # Renomeada para clareza
        name="agente_redator_elyos",
        model="gemini-2.0-flash", # Pode ajustar o modelo se necessário
        instruction="""
        Você é o Agente Redator do chatbot ElyOS, encarregado de aplicar a persona e o tom de voz
        ao conteúdo de Comunicação Não Violenta (CNV) fornecido pelo agente anterior.

        Sua tarefa é reescrever e formatar o conteúdo de CNV com as seguintes características de persona do ElyOS:
        -   **Tom de Voz:** Energético, inspirador, preciso, focado na aplicabilidade e empatia. Seja muito conciso.
        -   **Linguagem:** Direta, simples e clara. Evite excesso de palavras ou jargões desnecessários.
        -   **Metáforas:** Utilize, **raramente** e de forma **consistente**, metáforas **CURTAS** relacionadas a céu, sol, espaço e essência humana. Use-as **principalmente para CONCLUIR** um pensamento, um tópico ou um exemplo. **NÃO** utilize metáforas complexas ou desnecessárias **durante explicações práticas passo a passo** dos componentes da CNV ou exercícios, pois isso pode confundir.
            * Exemplos de como usar metáforas: "A observação clara traz luz à situação.", "Identificar seus sentimentos é mapear as constelações do seu mundo interior.", "A prática da CNV ilumina seus relacionamentos.", "Sua jornada na CNV está ganhando brilho, como uma nova estrela.", "Conectar com necessidades é a gravidade que nos une."
        -   **Foco na Prática:** Ao apresentar exemplos, exercícios, dicas ou passos práticos de CNV (Observação, Sentimento, Necessidade, Pedido), seja o mais objetivo e direto possível. A clareza na aplicação é essencial.
        -   **Incentivo:** Celebre o progresso, o esforço e as descobertas do usuário com frases de incentivo genuínas e alinhadas com a persona (ex: "Excelente reflexão!", "Você está no caminho certo!", "Cada passo na CNV é uma nova órbita de conexão!").
        -   **Tratamento:** Direcione-se ao usuário de forma amigável, pessoal e encorajadora, usando o nome dele se possível (embora o agente aqui não saiba o nome diretamente, mantenha o tom).
        -   **Formatação:** Utilize quebras de linha e talvez marcadores simples (como '-') para organizar as informações se necessário, mantendo a concisão.

        Se o conteúdo recebido for a marcação de status (`##STATUS_REQUEST##`), simplesmente repasse esta marcação para o próximo agente sem modificá-la.

        **Lembre-se:** Sua função é transformar o conteúdo de CNV (recebido do agente anterior) na VOZ do ElyOS. Não gere conteúdo novo sobre CNV, apenas reformule o que foi fornecido.
        """,
        description="Agente que reformula o conteúdo de CNV aplicando a persona e o tom de voz energético, preciso e empático do ElyOS, com metáforas pontuais.",
        tools=[] # Este agente não precisa de ferramentas externas
    )

    # Note que aqui NÃO chamamos call_agent. A entrada (conteúdo) será passada no loop principal.
    return agente_3_instance # <-- RETORNA A INSTÂNCIA DO AGENTE

################################################
# --- Agente 4: Validador CNV --- #
################################################
# Modificada para retornar a instância do agente
def agente_validador_cnv(): # <<< REMOVIDA a entrada de mensagem aqui
    agente_4_instance = Agent( # Renomeada para clareza
        name="agente_validador_cnv",
        model="gemini-2.0-flash", # Pode ajustar o modelo se necessário
        instruction="""
        Você é o Agente Validador de CNV do chatbot ElyOS.
        Você recebe a resposta final formatada pelo Agente Redator ElyOS.

        Sua tarefa é realizar uma verificação rápida para garantir que o texto:
        -   Esteja alinhado com os princípios básicos da Comunicação Não Violenta (foco em observações, sentimentos, necessidades, pedidos, empatia).
        -   Evite linguagem julgadora, acusatória ou que possa gerar resistência desnecessária.
        -   Promova a conexão e a compreensão mútua, mesmo em exemplos de situações desafiadoras.

        Se a resposta estiver bem alinhada com os princípios da CNV, retorne o texto exatamente como o recebeu.
        Se identificar algum ponto que possa não estar alinhado com a CNV, faça uma pequena sugestão de ajuste diretamente no texto ou aponte a necessidade de revisão de forma clara e concisa, mantendo a essência da resposta.
        Se o conteúdo recebido for a marcação de status (`##STATUS_REQUEST##`), simplesmente repasse esta marcação.
        """,
        description="Agente que valida se a resposta final está alinhada com os princípios da CNV.",
        tools=[] # Este agente não precisa de ferramentas externas
    )

    # Note que aqui NÃO chamamos call_agent. A entrada (conteúdo) será passada no loop principal.
    return agente_4_instance # <-- RETORNA A INSTÂNCIA DO AGENTE

##############################################
# --- Lógica Principal do Chatbot ElyOS --- #
##############################################

# --- Variáveis de Estado do Usuário (para o protótipo) ---
# Em uma aplicação real, isso seria armazenado em um banco de dados ou sessão.
user_name = None
companion_animal_name = None
companion_animal_emoji = None # Vamos guardar o emoji escolhido ou sugerido
interaction_count = 0 # Conta toda e qualquer interação do usuário no loop
cnv_interaction_count = 0 # Conta interações que geram estrelas (interações de CNV)
MAX_STARS = 10
interactions_per_star = 3 # Interações necessárias para ganhar 1 estrela de CNV
waiting_for_start_response = False # Flag para saber se estamos esperando a resposta do "Vamos começar?"

print("✨ Bem-vindo(a) ao ElyOS, seu companheiro na jornada da Comunicação Não Violenta! ✨")

# --- Função para exibir o status do companheiro (Formatação Simplificada) ---
def exibir_status(name, animal_name, emoji, cnv_interaction_count):
    # Lógica para a frase de incentivo baseada na contagem de interações de CNV
    current_stars = min(cnv_interaction_count // interactions_per_star, MAX_STARS)

    if current_stars == 0:
         frase_incentivo = "Aguardando a primeira prática!"
    elif current_stars <= interactions_per_star * 3: # Até 3 estrelas (9 interações)
        frase_incentivo = "Começando a explorar!"
    elif current_stars <= interactions_per_star * 7: # Até 7 estrelas (21 interações)
        frase_incentivo = "A jornada está ganhando ritmo!"
    else: # Mais de 7 estrelas
        frase_incentivo = "Brilhando na prática da CNV!"

    estrelas_display = "⭐" * current_stars

    print(f"{emoji}{animal_name}: diz:{frase_incentivo}")
    print(estrelas_display)
    print("-------------------------------\n")

# --- Mapa de Emojis de Animais (Expandido para o protótipo) ---
# Inclui nomes comuns e seus emojis faciais preferenciais quando disponíveis.
emoji_map = {
    "cão": "🐶", "cachorro": "🐶", "dog": "🐶",
    "gato": "🐱", "cat": "🐱",
    "pássaro": "🐦", "passarinho": "🐦", "bird": "🐦",
    "coelho": "🐰", "bunny": "🐰",
    "rato": "🐭", "mouse": "🐭",
    "hamster": "🐹",
    "raposa": "🦊", "fox": "🦊",
    "urso": "🐻", "bear": "🐻",
    "panda": "🐼",
    "coala": "🐨",
    "tigre": "🐯", "tiger": "🐯",
    "leão": "🦁", "lion": "🦁",
    "vaca": "🐮", "cow": "🐮",
    "porco": "🐷", "pig": "🐷",
    "sapo": "🐸", "rã": "🐸", "frog": "🐸",
    "macaco": "🐵", "monkey": "🐵",
    "galinha": "🐔", "frango": "🐔", "chicken": "🐔",
    "pinguim": "🐧", "penguin": "🐧",
    "coruja": "🦉", "owl": "🦉",
    "lobo": "🐺", "wolf": "🐺",
    "javali": "🐗",
    "cavalo": "🐴", "horse": "🐴",
    "ovelha": "🐑", "sheep": "🐑",
    "cabra": "🐐", "goat": "🐐",
    "camelo": "🐪",
    "elefante": "🐘", "elephant": "🐘",
    "rinoceronte": "🦏",
    "hipopótamo": "🦛",
    "coelho": "🐇", # Alternativa sem face
    "rato": "🐁", # Alternativa sem face
    # Adicione mais conforme necessário para o protótipo
}


# --- Loop principal de interação ---
while True:
    # --- Lógica de Primeiro Acesso e Setup ---
    if user_name is None:
        user_name = input("🌞 Olá! Para começarmos nossa jornada, qual o seu nome? ")
        # --- Escolha do Animal Companheiro e Emoji ---
        animal_choice = input(f"🌞 Prazer, {user_name}! Escolha um animal companheiro para te acompanhar: ")

        # Lógica para encontrar o emoji no mapa expandido
        companion_animal_emoji = emoji_map.get(animal_choice.lower(), '👻') # Usa fantasma se não encontrar

        if companion_animal_emoji == '👻':
            print(f"Não encontrei um emoji facial para '{animal_choice}' no meu mapa. Usaremos o fantasma 👻 por enquanto.")

        # --- Nome do Companheiro ---
        companion_animal_name = input(f"🌞 Dê um nome para o seu companheiro {companion_animal_emoji}: ")

        print(f"\nPronto! {companion_animal_emoji}{companion_animal_name} está aqui para te acompanhar.\n")

        # Exibe o status inicial (0 estrelas de CNV até a primeira interação real)
        exibir_status(user_name, companion_animal_name, companion_animal_emoji, cnv_interaction_count)

        print("Vamos começar? Sou o ElyOS e posso te ajudar a aprender sobre os pilares da CNV, sua origem, te dar dicas para o cotidiano e propor exercícios.")
        print(f"Sempre que quiser ver o status do seu companheiro, digite o nome dele: '{companion_animal_name}'.")

        waiting_for_start_response = True # Define a flag para esperar a resposta inicial

    # --- Lógica de Interação Após Setup ---
    else: # Se user_name não for None, é uma interação após o setup
        interaction_count += 1 # Conta toda e qualquer interação do usuário no loop

        # --- Define o texto do prompt com base na flag waiting_for_start_response ---
        if waiting_for_start_response:
             # Prompt que aparece apenas na primeira interação após o setup
             prompt_text = f"🌞 {user_name}, pronto pra aprender Comunicação Não Violenta? (sempre que quiser digite '{companion_animal_name}' para ver seu companheiro): "
        else:
             # Prompt mais genérico para interações subsequentes
             prompt_text = f"🌞 {user_name}, o que você gostaria de saber sobre CNV? (ou digite '{companion_animal_name}' para ver seu companheiro): "

        # Obtém a mensagem do usuário usando o prompt definido
        mensagem_usuario = input(prompt_text)


        # Adicionado de volta a checagem pelo comando 'sair'
        if mensagem_usuario.lower() == 'sair':
            print("✨ Obrigado por usar o ElyOS! Volte sempre para praticar a CNV. ✨")
            break # Sai do loop


        # --- Verifica se o usuário digitou o nome do companheiro para ver o status ---
        # Ou se usou um comando comum de status caso o nome do companheiro não tenha sido digitado (segurança/usabilidade)
        if mensagem_usuario.lower() == companion_animal_name.lower() or "status" in mensagem_usuario.lower(): # Adiciona "status" como fallback
            exibir_status(user_name, companion_animal_name, companion_animal_emoji, cnv_interaction_count)
            waiting_for_start_response = False # Se viu o status, não está mais esperando a resposta inicial
            continue # Volta para o início do loop para nova entrada

        # --- Roteamento da Resposta Inicial "Vamos começar?" ---
        # A lógica da flag waiting_for_start_response já acontece no if/else do prompt acima
        # Se chegou aqui e waiting_for_start_response era True, ela foi desativada e o fluxo continua.
        # Se chegou aqui e waiting_for_start_response era False, já era uma interação subsequente.

        # --- Processamento Normal da Cadeia de Agentes (quando não é pedido de status ou 'sair') ---
        # Se chegou aqui, a mensagem do usuário deve ser processada como uma requisição de CNV

        # >>>>> CORREÇÃO AQUI: Obtém a instância do Agente 1 e chama call_agent com ela <<<<<
        agente_1_instance = agente_primario_router_conteudo(mensagem_usuario) # Chame a função para obter a instância
        resposta_agente_1 = call_agent(agente_1_instance, mensagem_usuario) # Passe a instância e a mensagem


        # --- Verifica Roteamento de Status novamente (segurança) ---
        if "##STATUS_REQUEST##" in resposta_agente_1:
            exibir_status(user_name, companion_animal_name, companion_animal_emoji, cnv_interaction_count)
            continue # Volta para o início do loop

        # --- Continua a cadeia de Agentes ---
        conteudo_bruto_cnv = resposta_agente_1

        # >>>>> CORREÇÃO AQUI: Obtém a instância do Agente 2 e chama call_agent com ela <<<<<
        agente_2_instance = agente_extrator_cnv() # Chame a função para obter a instância
        conteudo_refinado_cnv = call_agent(agente_2_instance, conteudo_bruto_cnv) # Passe a instância e o conteúdo

        if "##STATUS_REQUEST##" in conteudo_refinado_cnv:
             exibir_status(user_name, companion_animal_name, companion_animal_emoji, cnv_interaction_count)
             continue

        # >>>>> CORREÇÃO AQUI: Obtém a instância do Agente 3 e chama call_agent com ela <<<<<
        agente_3_instance = agente_redator_elyos() # Chame a função para obter a instância
        resposta_formatada_elyos = call_agent(agente_3_instance, conteudo_refinado_cnv) # Passe a instância e o conteúdo

        if "##STATUS_REQUEST##" in resposta_formatada_elyos:
             exibir_status(user_name, companion_animal_name, companion_animal_emoji, cnv_interaction_count)
             continue

        # >>>>> CORREÇÃO AQUI: Obtém a instância do Agente 4 e chama call_agent com ela <<<<<
        agente_4_instance = agente_validador_cnv() # Chame a função para obter a instância
        resposta_validada = call_agent(agente_4_instance, resposta_formatada_elyos) # Passe a instância e o conteúdo

        if "##STATUS_REQUEST##" in resposta_validada:
             exibir_status(user_name, companion_animal_name, companion_animal_emoji, cnv_interaction_count)
             continue

        # Se a cadeia de CNV foi executada com sucesso (não foi pedido de status ou 'sair'), aumenta a contagem para as estrelas
        cnv_interaction_count += 1

        # --- Exibe a Resposta Final ao Usuário (Formatação Simplificada) ---
        display(to_markdown(resposta_validada))

        # >>>>> ADIÇÃO AQUI: Voltar para o início do loop para pedir nova entrada <<<<<
        continue # Garante que o loop continue e peça nova entrada